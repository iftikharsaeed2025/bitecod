{"version":3,"file":"vue-handsontable.min.js","sources":["../src/helpers.ts","../src/HotTable.vue","../src/HotTable.vue?vue&type=template&id=54bcc3fa&lang.js","../src/HotColumn.vue"],"sourcesContent":["import Handsontable from 'handsontable/base';\nimport { HotTableProps, VueProps } from './types';\n\nconst unassignedPropSymbol = Symbol('unassigned');\n\n/**\n * Message for the warning thrown if the Handsontable instance has been destroyed.\n */\nexport const HOT_DESTROYED_WARNING = 'The Handsontable instance bound to this component was destroyed and cannot be' +\n  ' used properly.';\n\n/**\n * Check if at specified `key` there is any value for `object`.\n *\n * @param {object} object Object to search value at specyfic key.\n * @param {string} key String key to check.\n * @returns {boolean}\n */\nexport function hasOwnProperty(object: unknown, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(object, key);\n}\n\n/**\n * Generate an object containing all the available Handsontable properties and plugin hooks.\n *\n * @param {string} source Source for the factory (either 'HotTable' or 'HotColumn').\n * @returns {object}\n */\nexport function propFactory(source: 'HotTable' | 'HotColumn'): VueProps<HotTableProps> {\n  const registeredHooks = Handsontable.hooks.getRegistered();\n  const propSchema: VueProps<HotTableProps> = {};\n\n  Object.assign(propSchema, Handsontable.DefaultSettings);\n\n  // eslint-disable-next-line no-restricted-syntax, guard-for-in\n  for (const prop in propSchema) {\n    propSchema[prop] = {\n      default: unassignedPropSymbol\n    };\n  }\n\n  for (let i = 0; i < registeredHooks.length; i++) {\n    propSchema[registeredHooks[i]] = {\n      default: unassignedPropSymbol\n    };\n  }\n\n  propSchema.settings = {\n    default: unassignedPropSymbol\n  };\n\n  if (source === 'HotTable') {\n    propSchema.id = {\n      type: String,\n      default: `hot-${Math.random().toString(36).substring(5)}`\n    };\n  }\n\n  return propSchema;\n}\n\n/**\n * Filter out all of the unassigned props, and return only the one passed to the component.\n *\n * @param {object} props Object containing all the possible props.\n * @returns {object} Object containing only used props.\n */\nexport function filterPassedProps(props) {\n  const filteredProps: VueProps<HotTableProps> = {};\n  const columnSettingsProp = props.settings;\n\n  if (columnSettingsProp !== unassignedPropSymbol) {\n    // eslint-disable-next-line no-restricted-syntax\n    for (const propName in columnSettingsProp) {\n      if (hasOwnProperty(columnSettingsProp, propName) && columnSettingsProp[propName] !== unassignedPropSymbol) {\n        filteredProps[propName] = columnSettingsProp[propName];\n      }\n    }\n  }\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const propName in props) {\n    if (hasOwnProperty(props, propName) && propName !== 'settings' && props[propName] !== unassignedPropSymbol) {\n      filteredProps[propName] = props[propName];\n    }\n  }\n\n  return filteredProps;\n}\n\n/**\n * Prepare the settings object to be used as the settings for Handsontable, based on the props provided to the component.\n *\n * @param {HotTableProps} props The props passed to the component.\n * @param {Handsontable.GridSettings} currentSettings The current Handsontable settings.\n * @returns {Handsontable.GridSettings} An object containing the properties, ready to be used within Handsontable.\n */\nexport function prepareSettings(props: HotTableProps, currentSettings?: Handsontable.GridSettings): HotTableProps {\n  const assignedProps: VueProps<HotTableProps> = filterPassedProps(props);\n  const hotSettingsInProps: Handsontable.GridSettings = props.settings ? props.settings : assignedProps;\n  const additionalHotSettingsInProps: Handsontable.GridSettings = props.settings ? assignedProps : null;\n  const newSettings: Handsontable.GridSettings = {};\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const key in hotSettingsInProps) {\n    if (\n      hasOwnProperty(hotSettingsInProps, key) &&\n      hotSettingsInProps[key] !== void 0 &&\n      ((currentSettings && key !== 'data') ? !simpleEqual(currentSettings[key], hotSettingsInProps[key]) : true)\n    ) {\n      newSettings[key] = hotSettingsInProps[key];\n    }\n  }\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const key in additionalHotSettingsInProps) {\n    if (\n      hasOwnProperty(additionalHotSettingsInProps, key) &&\n      key !== 'id' &&\n      key !== 'settings' &&\n      additionalHotSettingsInProps[key] !== void 0 &&\n      ((currentSettings && key !== 'data')\n        ? !simpleEqual(currentSettings[key], additionalHotSettingsInProps[key]) : true)\n    ) {\n      newSettings[key] = additionalHotSettingsInProps[key];\n    }\n  }\n\n  return newSettings;\n}\n\n/**\n * Compare two objects using `JSON.stringify`.\n * *Note: * As it's using the stringify function to compare objects, the property order in both objects is\n * important. It will return `false` for the same objects, if they're defined in a different order.\n *\n * @param {object} objectA First object to compare.\n * @param {object} objectB Second object to compare.\n * @returns {boolean} `true` if they're the same, `false` otherwise.\n */\nfunction simpleEqual(objectA, objectB) {\n  const stringifyToJSON = (val) => {\n    const circularReplacer = (function() {\n      const seen = new WeakSet();\n\n      return function(key, value) {\n        if (typeof value === 'object' && value !== null) {\n          if (seen.has(value)) {\n            return;\n          }\n\n          seen.add(value);\n        }\n\n        return value;\n      };\n    }());\n\n    return JSON.stringify(val, circularReplacer);\n  };\n\n  if (typeof objectA === 'function' && typeof objectB === 'function') {\n    return objectA.toString() === objectB.toString();\n\n  } else if (typeof objectA !== typeof objectB) {\n    return false;\n\n  } else {\n    return stringifyToJSON(objectA) === stringifyToJSON(objectB);\n  }\n}\n","<template>\n  <div :id=\"id\">\n    <slot></slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\n// eslint-disable-next-line  @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport { defineComponent, VNode, markRaw } from 'vue';\n// TODO: The line above is ts-ignored because rollup-plugin-typescript2 throws an error otherwise.\n// It's most probably caused by outdated rollup-plugin-vue which is no longer maintained.\n\nimport Handsontable from 'handsontable/base';\nimport {\n  HOT_DESTROYED_WARNING,\n  prepareSettings,\n  propFactory,\n} from './helpers';\nimport {\n  HotTableProps,\n} from './types';\nimport * as packageJson from '../package.json';\n\nconst HotTable = defineComponent({\n  name: 'HotTable',\n  props: propFactory('HotTable'),\n  provide() {\n    return {\n      columnsCache: this.columnsCache\n    };\n  },\n  watch: {\n    $props: {\n      handler(props) {\n        const settings = prepareSettings(props, this.hotInstance ? this.hotInstance.getSettings() : void 0);\n\n        if (!this.hotInstance || settings === void 0) {\n          return;\n        }\n\n        if (settings.data) {\n          if (\n            this.hotInstance.isColumnModificationAllowed() ||\n            (\n              !this.hotInstance.isColumnModificationAllowed() &&\n              this.hotInstance.countSourceCols() === this.miscCache.currentSourceColumns\n            )\n          ) {\n            // If the dataset dimensions change, update the index mappers.\n            this.matchHotMappersSize();\n\n            // Data is automatically synchronized by reference.\n            delete settings.data;\n          }\n        }\n\n        // If there are another options changed, update the HOT settings, render the table otherwise.\n        if (Object.keys(settings).length) {\n          this.hotInstance.updateSettings(settings);\n\n        } else {\n          this.hotInstance.render();\n        }\n\n        this.miscCache.currentSourceColumns = this.hotInstance.countSourceCols();\n      },\n      deep: true,\n      immediate: true,\n    },\n  },\n  data() {\n    return {\n      /* eslint-disable vue/no-reserved-keys */\n      __hotInstance: null as Handsontable,\n      /* eslint-enable vue/no-reserved-keys */\n      miscCache: {\n        currentSourceColumns: null,\n      },\n      columnSettings: null as HotTableProps[],\n      columnsCache: new Map<VNode, HotTableProps>(),\n      get hotInstance(): Handsontable | null {\n        if (!this.__hotInstance || (this.__hotInstance && !this.__hotInstance.isDestroyed)) {\n\n          // Will return the Handsontable instance or `null` if it's not yet been created.\n          return this.__hotInstance;\n\n        } else {\n          /* eslint-disable-next-line no-console */\n          console.warn(HOT_DESTROYED_WARNING);\n\n          return null;\n        }\n      },\n      set hotInstance(hotInstance: Handsontable) {\n        this.__hotInstance = hotInstance;\n      },\n    };\n  },\n  methods: {\n    /**\n     * Initialize Handsontable.\n     */\n    hotInit() {\n      const newSettings = prepareSettings(this.$props);\n\n      newSettings.columns = this.columnSettings ? this.columnSettings : newSettings.columns;\n\n      this.hotInstance = markRaw<Handsontable>(new Handsontable.Core(this.$el, newSettings));\n      this.hotInstance.init();\n\n      this.miscCache.currentSourceColumns = this.hotInstance.countSourceCols();\n    },\n\n    matchHotMappersSize(): void {\n      if (!this.hotInstance) {\n        return;\n      }\n\n      const data: Handsontable.CellValue[][] = this.hotInstance.getSourceData();\n      const rowsToRemove: number[] = [];\n      const columnsToRemove: number[] = [];\n      const indexMapperRowCount = this.hotInstance.rowIndexMapper.getNumberOfIndexes();\n      const isColumnModificationAllowed = this.hotInstance.isColumnModificationAllowed();\n      let indexMapperColumnCount = 0;\n\n      if (data && data.length !== indexMapperRowCount) {\n        if (data.length < indexMapperRowCount) {\n          for (let r = data.length; r < indexMapperRowCount; r++) {\n            rowsToRemove.push(r);\n          }\n        }\n      }\n\n      if (isColumnModificationAllowed) {\n        indexMapperColumnCount = this.hotInstance.columnIndexMapper.getNumberOfIndexes();\n\n        if (data && data[0] && data[0]?.length !== indexMapperColumnCount) {\n          if (data[0].length < indexMapperColumnCount) {\n            for (let c = data[0].length; c < indexMapperColumnCount; c++) {\n              columnsToRemove.push(c);\n            }\n          }\n        }\n      }\n\n      this.hotInstance.batch(() => {\n        if (rowsToRemove.length > 0) {\n          this.hotInstance.rowIndexMapper.removeIndexes(rowsToRemove);\n\n        } else {\n          this.hotInstance.rowIndexMapper\n            .insertIndexes(indexMapperRowCount - 1, data.length - indexMapperRowCount);\n        }\n\n        if (isColumnModificationAllowed && data.length !== 0) {\n          if (columnsToRemove.length > 0) {\n            this.hotInstance.columnIndexMapper.removeIndexes(columnsToRemove);\n\n          } else {\n            this.hotInstance.columnIndexMapper\n              .insertIndexes(indexMapperColumnCount - 1, data[0].length - indexMapperColumnCount);\n          }\n        }\n      });\n    },\n\n    /**\n     * Get settings for the columns provided in the `hot-column` components.\n     *\n     * @returns {HotTableProps[] | undefined}\n     */\n    getColumnSettings(): HotTableProps[] | void {\n      const columnSettings: HotTableProps[] = Array.from(this.columnsCache.values());\n\n      return columnSettings.length ? columnSettings : void 0;\n    },\n  },\n  mounted() {\n    this.columnSettings = this.getColumnSettings();\n    this.hotInit();\n  },\n  beforeUnmount() {\n    if (this.hotInstance) {\n      this.hotInstance.destroy();\n    }\n  },\n  version: (packageJson as unknown as { version: string }).version,\n});\n\nexport default HotTable;\nexport { HotTable };\n</script>\n","<template>\n  <div :id=\"id\">\n    <slot></slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\n// eslint-disable-next-line  @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport { defineComponent, VNode, markRaw } from 'vue';\n// TODO: The line above is ts-ignored because rollup-plugin-typescript2 throws an error otherwise.\n// It's most probably caused by outdated rollup-plugin-vue which is no longer maintained.\n\nimport Handsontable from 'handsontable/base';\nimport {\n  HOT_DESTROYED_WARNING,\n  prepareSettings,\n  propFactory,\n} from './helpers';\nimport {\n  HotTableProps,\n} from './types';\nimport * as packageJson from '../package.json';\n\nconst HotTable = defineComponent({\n  name: 'HotTable',\n  props: propFactory('HotTable'),\n  provide() {\n    return {\n      columnsCache: this.columnsCache\n    };\n  },\n  watch: {\n    $props: {\n      handler(props) {\n        const settings = prepareSettings(props, this.hotInstance ? this.hotInstance.getSettings() : void 0);\n\n        if (!this.hotInstance || settings === void 0) {\n          return;\n        }\n\n        if (settings.data) {\n          if (\n            this.hotInstance.isColumnModificationAllowed() ||\n            (\n              !this.hotInstance.isColumnModificationAllowed() &&\n              this.hotInstance.countSourceCols() === this.miscCache.currentSourceColumns\n            )\n          ) {\n            // If the dataset dimensions change, update the index mappers.\n            this.matchHotMappersSize();\n\n            // Data is automatically synchronized by reference.\n            delete settings.data;\n          }\n        }\n\n        // If there are another options changed, update the HOT settings, render the table otherwise.\n        if (Object.keys(settings).length) {\n          this.hotInstance.updateSettings(settings);\n\n        } else {\n          this.hotInstance.render();\n        }\n\n        this.miscCache.currentSourceColumns = this.hotInstance.countSourceCols();\n      },\n      deep: true,\n      immediate: true,\n    },\n  },\n  data() {\n    return {\n      /* eslint-disable vue/no-reserved-keys */\n      __hotInstance: null as Handsontable,\n      /* eslint-enable vue/no-reserved-keys */\n      miscCache: {\n        currentSourceColumns: null,\n      },\n      columnSettings: null as HotTableProps[],\n      columnsCache: new Map<VNode, HotTableProps>(),\n      get hotInstance(): Handsontable | null {\n        if (!this.__hotInstance || (this.__hotInstance && !this.__hotInstance.isDestroyed)) {\n\n          // Will return the Handsontable instance or `null` if it's not yet been created.\n          return this.__hotInstance;\n\n        } else {\n          /* eslint-disable-next-line no-console */\n          console.warn(HOT_DESTROYED_WARNING);\n\n          return null;\n        }\n      },\n      set hotInstance(hotInstance: Handsontable) {\n        this.__hotInstance = hotInstance;\n      },\n    };\n  },\n  methods: {\n    /**\n     * Initialize Handsontable.\n     */\n    hotInit() {\n      const newSettings = prepareSettings(this.$props);\n\n      newSettings.columns = this.columnSettings ? this.columnSettings : newSettings.columns;\n\n      this.hotInstance = markRaw<Handsontable>(new Handsontable.Core(this.$el, newSettings));\n      this.hotInstance.init();\n\n      this.miscCache.currentSourceColumns = this.hotInstance.countSourceCols();\n    },\n\n    matchHotMappersSize(): void {\n      if (!this.hotInstance) {\n        return;\n      }\n\n      const data: Handsontable.CellValue[][] = this.hotInstance.getSourceData();\n      const rowsToRemove: number[] = [];\n      const columnsToRemove: number[] = [];\n      const indexMapperRowCount = this.hotInstance.rowIndexMapper.getNumberOfIndexes();\n      const isColumnModificationAllowed = this.hotInstance.isColumnModificationAllowed();\n      let indexMapperColumnCount = 0;\n\n      if (data && data.length !== indexMapperRowCount) {\n        if (data.length < indexMapperRowCount) {\n          for (let r = data.length; r < indexMapperRowCount; r++) {\n            rowsToRemove.push(r);\n          }\n        }\n      }\n\n      if (isColumnModificationAllowed) {\n        indexMapperColumnCount = this.hotInstance.columnIndexMapper.getNumberOfIndexes();\n\n        if (data && data[0] && data[0]?.length !== indexMapperColumnCount) {\n          if (data[0].length < indexMapperColumnCount) {\n            for (let c = data[0].length; c < indexMapperColumnCount; c++) {\n              columnsToRemove.push(c);\n            }\n          }\n        }\n      }\n\n      this.hotInstance.batch(() => {\n        if (rowsToRemove.length > 0) {\n          this.hotInstance.rowIndexMapper.removeIndexes(rowsToRemove);\n\n        } else {\n          this.hotInstance.rowIndexMapper\n            .insertIndexes(indexMapperRowCount - 1, data.length - indexMapperRowCount);\n        }\n\n        if (isColumnModificationAllowed && data.length !== 0) {\n          if (columnsToRemove.length > 0) {\n            this.hotInstance.columnIndexMapper.removeIndexes(columnsToRemove);\n\n          } else {\n            this.hotInstance.columnIndexMapper\n              .insertIndexes(indexMapperColumnCount - 1, data[0].length - indexMapperColumnCount);\n          }\n        }\n      });\n    },\n\n    /**\n     * Get settings for the columns provided in the `hot-column` components.\n     *\n     * @returns {HotTableProps[] | undefined}\n     */\n    getColumnSettings(): HotTableProps[] | void {\n      const columnSettings: HotTableProps[] = Array.from(this.columnsCache.values());\n\n      return columnSettings.length ? columnSettings : void 0;\n    },\n  },\n  mounted() {\n    this.columnSettings = this.getColumnSettings();\n    this.hotInit();\n  },\n  beforeUnmount() {\n    if (this.hotInstance) {\n      this.hotInstance.destroy();\n    }\n  },\n  version: (packageJson as unknown as { version: string }).version,\n});\n\nexport default HotTable;\nexport { HotTable };\n</script>\n","<script lang=\"ts\">\n// eslint-disable-next-line  @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport { defineComponent } from 'vue';\n// TODO: The line above is ts-ignored because rollup-plugin-typescript2 throws an error otherwise.\n// It's most probably caused by outdated rollup-plugin-vue which is no longer maintained.\n\nimport {\n  propFactory,\n  filterPassedProps\n} from './helpers';\n\nconst HotColumn = defineComponent({\n  name: 'HotColumn',\n  props: propFactory('HotColumn'),\n  inject: ['columnsCache'],\n  methods: {\n    /**\n     * Create the column settings based on the data provided to the `hot-column`\n     * component and it's child components.\n     */\n    createColumnSettings(): void {\n      const assignedProps = filterPassedProps(this.$props);\n      const columnSettings = { ...assignedProps };\n\n      if (assignedProps.renderer) {\n        columnSettings.renderer = assignedProps.renderer;\n      }\n\n      if (assignedProps.editor) {\n        columnSettings.editor = assignedProps.editor;\n      }\n\n      this.columnsCache.set(this, columnSettings);\n    }\n  },\n  mounted() {\n    this.createColumnSettings();\n  },\n  unmounted() {\n    this.columnsCache.delete(this);\n  },\n  render() {\n    return null;\n  }\n});\n\nexport default HotColumn;\nexport { HotColumn };\n</script>\n"],"names":["unassignedPropSymbol","Symbol","hasOwnProperty","object","key","Object","prototype","call","propFactory","source","registeredHooks","Handsontable","hooks","getRegistered","propSchema","prop","assign","DefaultSettings","default","i","length","settings","id","type","String","concat","Math","random","toString","substring","filterPassedProps","props","filteredProps","columnSettingsProp","propName","prepareSettings","currentSettings","assignedProps","hotSettingsInProps","additionalHotSettingsInProps","newSettings","simpleEqual","objectA","objectB","stringifyToJSON","val","seen","circularReplacer","WeakSet","value","_typeof","has","add","JSON","stringify","HotTable","defineComponent","name","provide","columnsCache","this","watch","$props","handler","hotInstance","getSettings","data","isColumnModificationAllowed","countSourceCols","miscCache","currentSourceColumns","matchHotMappersSize","keys","updateSettings","render","deep","immediate","__hotInstance","columnSettings","Map","isDestroyed","console","warn","methods","hotInit","columns","markRaw","Core","$el","init","_this","_data$","getSourceData","rowsToRemove","columnsToRemove","indexMapperRowCount","rowIndexMapper","getNumberOfIndexes","indexMapperColumnCount","r","push","columnIndexMapper","c","batch","removeIndexes","insertIndexes","getColumnSettings","Array","from","values","mounted","beforeUnmount","destroy","version","_createElementBlock","_ctx","_renderSlot","$slots","HotColumn","inject","createColumnSettings","_objectSpread","renderer","editor","set","unmounted"],"mappings":"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"}